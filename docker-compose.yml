version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: birdnest_postgres
    environment:
      POSTGRES_DB: birdnest_shop
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - birdnest_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (NestJS)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: deps
    container_name: birdnest_backend
    environment:
      NODE_ENV: development
      PORT: 8080
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/birdnest_shop?schema=public
      JWT_SECRET: your-jwt-secret-key
      CORS_ORIGIN: http://localhost:3000,http://localhost:3001
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - birdnest_network
    command: npm run start:dev
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: birdnest_frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8080/api
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      NEXTAUTH_URL: http://localhost:3000
      NEXTAUTH_SECRET: your-nextauth-secret
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - birdnest_network
    command: npm run dev

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: birdnest_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - birdnest_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx (reverse proxy for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: birdnest_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - birdnest_network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  birdnest_network:
    driver: bridge 