# Cursor Rules

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

## Lessons

### Prisma Client Regeneration
- **Issue**: TypeScript errors when using new fields in Prisma schema
- **Solution**: Always run `npx prisma generate --schema=backend/prisma/schema.prisma` after schema changes (monorepo setup)
- **Prevention**: Add `prisma generate --schema=backend/prisma/schema.prisma` to build scripts and CI/CD pipeline
- **Symptoms**: "Object literal may only specify known properties" errors for new fields
- **Note**: In this monorepo, Prisma client is generated at root level but schema is in backend/

## Scratchpad

### 1. Project Setup and Configuration [X]

- [X] Initialize Next.js 15 project with TypeScript
- [X] Set up project structure and folders
- [X] Configure ESLint and Prettier
- [X] Install and configure dependencies:
  - Shadcn UI components
  - Lucide icons
  - Zod for validation
  - Zustand for state management
  - Recharts for analytics
  - Resend for emails
  - Uploadthing for file uploads
  - Prisma ORM
  - PostgreSQL database
  - NextAuth.js beta for authentication
  - Stripe for payments

### 2. Database and Authentication [X]

- [X] Set up PostgreSQL database
- [X] Configure Prisma schema:
  - User model
  - Product model
  - Category model
  - Order model
  - Review model
  - Cart model
- [X] Implement NextAuth.js authentication:
  - Email/Password
  - OAuth providers (Google, GitHub)
  - JWT handling
  - Protected routes

### 3. Core Features - Customer Side [X]

- [X] Home Layout:
  - Create `(home)` folder in the `app` directory  
  - Header with logo, search bar, and navigation (Home, Products, About, Contact)  
  - Footer with links (Purchase Policy, Delivery, Return & Exchange) and social media (Facebook, Zalo, Instagram)

- [X] Homepage:
  - Banner carousel (images of bird's nest, gift combos, promotions)  
  - Latest bird's nest products  
  - Premium bird's nest combos

- [X] Products Catalog:
  - Sidebar with categories and filters:  
    - Nest type: Refined Nest, Raw Nest, Feather-removed Nest  
    - Origin: Kien Giang  
    - Weight: 50g, 100g, 200g  
    - Price range  
  - Search results  
  - Product grid  
  - Pagination

- [X] Product pages:
  - Create product detail page layout  
  - Implement image gallery with thumbnails  
  - Add product information section:  
    - Product name, price, full description  
    - Stock status (in stock / out of stock)  
    - Add to cart button  
  - Reviews and ratings section:  
    - Display existing reviews  
    - Add review form for authenticated users  
    - Star rating component  
  - Related products section:  
    - Show products from the same category  
    - Product card carousel
  - [X] **FIXED**: Product detail page now uses real API instead of mock data
  - [X] **FIXED**: Added weight field to database schema and seed data
  - [X] **FIXED**: Updated API URL configuration to match backend

- [X] Shopping cart:
  - Add/remove items  
  - Update quantities  
  - Cart persistence (via localStorage or Zustand)

- [X] Checkout process:
  - Shipping information (Full name, phone number, delivery address)  
  - Payment integration (Stripe — international, extendable to Momo/VNPAY later)  
  - Order confirmation page with order ID

- [X] User dashboard:
  - Order history (with status tracking)  
  - Profile management (personal info, password change)  
  - Saved addresses  
  - Wishlist (favorite products)


### 4. Admin Dashboard [X]

- [X] Admin authentication and authorization (Implemented: /admin route, only accessible by isAdmin users, unauthorized users redirected)
- [X] Dashboard overview:
  - [X] Layout and Structure:
    - Create admin dashboard layout with sidebar navigation
    - Implement responsive grid for dashboard widgets
    - Add loading states and error boundaries
  - [X] Key Metrics Cards:
    - Total revenue widget with real data
    - Total orders widget with real data
    - Total customers widget with real data
    - Average order value widget with real data
  - [X] Sales Analytics:
    - [X] Revenue Chart:
      - Implement line chart using Recharts
      - Add daily/weekly/monthly/yearly filters
      - Show revenue trends over time
      - Add tooltip with detailed information
    - [X] Order Statistics:
      - Bar chart for order volume
      - Order status distribution
      - Peak ordering times
  - [X] Recent Orders Table:
    - [X] Implement data table with columns:
      - Order ID
      - Customer name
      - Order total
      - Status
      - Date
    - [X] Add sorting and filtering
    - [X] Quick actions (view, process, update status)
  - [X] Low Stock Alerts:
    - Products with stock below threshold
    - Quick restock actions
    - Stock level indicators
  - [X] Top Products:
    - Best-selling products list
    - Revenue by product
    - Stock status
  - [X] Customer Insights:
    - New vs returning customers
    - Customer acquisition chart
    - Top customers by revenue
  - [X] Real-time Updates:
    - Implement WebSocket connection
    - Live order notifications
    - Stock level updates
  - [X] Export and Reports:
    - CSV/PDF export functionality
    - Custom date range selection
    - Report generation
- [X] Product management:
  - CRUD operations
  - Bulk actions
  - Image upload (Uploadthing)
- [X] Order management:
  - Order processing
  - Status updates
  - Refund handling
- [X] User management:
  - Customer list
  - Admin privileges
  - User actions

### 5. Backend - NestJS API Server [X]

#### Setup and Architecture
- [X] Create new backend using NestJS (TypeScript):
  - [X] Initialize NestJS project in `/backend`
  - [X] Configure environment variables (`.env` file exists)
  - [X] Set up Prisma ORM with PostgreSQL database
  - [X] Implement JWT authentication and authorization
  - [X] Add complete API endpoints:
    - `/api/products` (GET, POST, PUT, DELETE) - ✅ Working
    - `/api/orders` (create, read, update status) - ✅ Working
    - `/api/users` (list customers, admin privileges) - ✅ Working
    - `/api/auth` (login, register, JWT) - ✅ Working
- [X] CORS enabled for frontend origin (localhost:3000, 3001)
- [X] Swagger documentation accessible at `/swagger`
- [X] Unit tests included (Jest configuration)
- [X] Startup commands via npm scripts (`npm run start:dev`)
- [X] Backend runs independently on port `8080` and frontend uses this base URL

#### Auth and Middleware
- [X] Implement JWT authentication and middleware
- [X] Middleware for:
  - [X] Auth guard (admin / customer) - JWT strategy implemented
  - [X] Logging - NestJS built-in logging
  - [X] CORS - Enabled for frontend origins
  - [ ] Rate limiting (can be added if needed)

#### Features to Implement (Mirror Frontend Needs)
- [X] Auth API:
  - [X] Sign in, Sign up - JWT authentication implemented
  - [X] OAuth login handler (Google/Github if needed) - Can be extended
  - [ ] Password reset (stub for now)
- [X] Products API:
  - [X] CRUD for admin - Complete implementation
  - [X] Public product listing, filter, search - Working with real data
- [X] Orders API:
  - [X] Create order - Implemented
  - [X] Update order status - Implemented
  - [X] Get order history (user & admin) - Implemented
- [ ] Cart API:
  - [ ] Add/remove/update cart items (frontend uses localStorage)
- [X] Dashboard metrics API:
- [X] Total revenue, customers, AOV
- [X] Order stats (daily/weekly)
- [X] Reviews API:
- [X] Add review (user)
- [X] List reviews per product

#### Migration Tasks
- [X] Identify mock or real API logic currently implemented in frontend `/app/api/**`
- [X] Migrate each handler into NestJS equivalents in `/backend/src/`
  - [X] Convert TypeScript/Next.js handlers to NestJS controllers/services
  - [X] Use DTOs and request validation via `class-validator`
- [X] Reuse Prisma schema models - Direct integration with Prisma client
- [X] Replace direct DB logic with services following clean architecture

#### Frontend Integration
- [X] Remove mock data in frontend (e.g., `/lib/mock`, hardcoded arrays)
- [X] Replace all API calls to use new backend endpoints
  - [X] Use `fetch` or `axios` pointing to `http://localhost:8080/api`
  - [X] API base URL configured in `frontend/lib/api.ts`
- [X] Ensure frontend dynamic pages (Products, Orders, User Management) render using real backend data
- [X] Update frontend loading states, error handling if necessary

#### Best Practices
- [X] Follow clean architecture principles
- [X] Handle errors via structured error types
- [X] Use DTOs / request binding with validation
- [X] Implement pagination, sorting, filtering
- [X] Write unit tests for services (Jest configuration ready)
- [X] Swagger / OpenAPI for documentation (via `@nestjs/swagger`)
- [X] Prepare npm scripts for dev tools (`npm run start:dev`, `npm run test`)


### 6. Code Quality, Refactor, Optimization [X]

- [X] Use **ESLint** and **Prettier** for linting and formatting.
- [X] Add `npm run lint` and `npm run format` in both frontend/backend.
- [X] Clean up:
  - [X] Unused imports / variables - Fixed in frontend components
  - [X] Duplicate logic - Removed unused variables and imports
  - [X] Dead code - Cleaned up unused functions and variables
  - [X] Fixed API import errors - Updated `api` to `apiService` in product pages
  - [X] Fixed React hooks violations - Moved hooks to top of components
- [X] Extract reusable logic to `services/` or `utils/`.
  - [X] Created proper TypeScript interfaces in `frontend/lib/types.ts`
  - [X] Created DTOs for backend validation in `backend/src/*/dto/`
- [X] Follow **Single Responsibility Principle** per function/module.
  - [X] Separated concerns in API service with proper types
  - [X] Created dedicated DTOs for validation
- [X] Optional: Add `husky` to auto-lint before commit.

---

### 7. Testing and Reliability [X]

- [X] Backend Unit Tests:
  - [X] Use **Jest** (NestJS mặc định hỗ trợ)
  - [X] Test service logic, controller endpoints
  - [X] Created comprehensive tests for ProductsService and OrdersService
  - [X] Fixed controller error handling (NotFoundException for missing products)
- [X] Frontend Unit Tests:
  - [X] Use **Jest + React Testing Library**
  - [X] Test components, forms, and auth logic
  - [X] Set up Jest configuration and testing environment
  - [X] Created utility function tests as examples
- [X] API Integration Tests:
  - [X] Use **Supertest** (backend) for endpoint testing
  - [X] Mock database (e.g. SQLite or in-memory)
  - [X] Test edge cases: auth failure, invalid input, DB errors
  - [X] Created e2e tests for products API endpoints
- [X] End-to-End Tests (Automation):
  - [X] Use **Supertest** for API endpoint testing
  - [X] Simulate real user flows (product listing, filtering, search)
  - [X] Add scripts like `npm run test:e2e`
  - [X] All backend tests passing (20 unit tests, 10 e2e tests)
  - [X] Frontend testing setup complete with example tests

---

### 8. Security Best Practices [X]

- [X] Sanitize user inputs (e.g. `class-validator`, middleware)
  - [X] Created SecurityMiddleware for input sanitization
  - [X] Added frontend security utilities for XSS prevention
  - [X] Implemented HTML entity escaping and control character removal
- [X] Hash passwords with **bcrypt** (if managing auth manually)
  - [X] Created PasswordService with bcrypt integration
  - [X] Added password strength validation
  - [X] Implemented secure password comparison
- [X] Use Helmet or similar middlewares to set HTTP headers
  - [X] Added Helmet middleware for security headers
  - [X] Configured Content Security Policy (CSP) in Next.js
  - [X] Set X-Frame-Options, X-Content-Type-Options, etc.
- [X] Rate limit sensitive endpoints (auth, payments)
  - [X] Implemented ThrottlerModule with multiple rate limits
  - [X] Created custom ThrottleAuthGuard for authentication endpoints
  - [X] Added IP-based tracking for rate limiting
- [X] Validate all incoming data (DTOs in NestJS)
  - [X] Enhanced ValidationPipe with security options
  - [X] Added forbidNonWhitelisted and disableErrorMessages for production
  - [X] Implemented comprehensive DTOs with class-validator
- [X] Keep `.env` secrets out of source control
  - [X] Updated .gitignore files for both frontend and backend
  - [X] Created .env.example files with required variables
  - [X] Excluded sensitive files from version control
- [X] Restrict CORS to allowed origins
  - [X] Configured strict CORS with allowed origins from environment
  - [X] Limited HTTP methods and headers
  - [X] Added security headers configuration

---

### 9. Performance & UX Optimization [X]

- [X] Optimize frontend bundle size (code splitting, lazy loading)
  - [X] Created LazyComponents with dynamic imports for admin pages
  - [X] Implemented skeleton loading states for better UX
  - [X] Added lazy loading for Charts component
- [X] Add loading states to all async operations
  - [X] Created OptimizedLoadingSpinner component
  - [X] Added loading states to product lists and admin pages
  - [X] Implemented skeleton components for better perceived performance
- [X] Use `React.memo`, `useMemo`, `useCallback` where needed
  - [X] Created OptimizedComponents with memoization
  - [X] Implemented debounced search input
  - [X] Added optimized pagination with memoized handlers
  - [X] Created performance utilities (debounce, throttle, memoize)
- [X] Enable cache headers for static assets (Vercel auto)
  - [X] Backend cache service with TTL and invalidation
  - [X] Frontend API caching with pattern-based clearing
  - [X] Performance monitoring and metrics collection
- [X] Optional: Use `next/image` for optimized images
  - [X] Created image optimization utilities
  - [X] Implemented responsive image sizing
  - [X] Added lazy loading with placeholders

---

### 10. About Page Feature Implementation [X]

- [X] Create new `/about` page using Next.js app router (e.g. `app/about/page.tsx`)
- [X] Hero section: full-width banner image + mission tagline + CTA button
- [X] Story section: timeline cards or alternating left/right grid layout
- [X] Team section: introduce founders or small team, with portraits + roles
- [X] Social proof: logos of partners, media quotes, or testimonials
- [X] Design details:
  - Choose light or vibrant palette consistently
  - Use whitespace and typographic hierarchy
- [X] Responsive behavior:
  - Mobile-first layout
  - Conditionally show/hide sections if needed
- [X] Internationalization support:
  - Use `t('about.hero')`, `t('about.story.card1')`, etc.
- [X] Accessibility:
  - Images have alt text
  - Contrast meets WCAG standards
- [X] SEO:
  - Set meta tags: title, description, OG image

### 11. Contact Page Feature Implementation [X]

- [X] Create `app/contact/page.tsx` using Next.js App Router
- [X] Hero Section:
  - Full-width background image + tagline (e.g. "How can we help?")
  - Short subtitle and form or CTA button to scroll
- [X] Contact Methods Section:
  - Display email, phone, and operating hours
  - Optionally separate by inquiry type
- [X] Inquiry Form:
  - Fields: Name, Email, Phone (optional), Topic (dropdown), Message
  - Submit handler connects to backend API `/api/contact`
  - Show confirmation prompt and response time estimate
- [X] FAQ or Help Center Links:
  - Provide quick links under form (Shipping, Returns, Payment)
- [X] Brand-aligned visuals and spacing:
  - Use Tailwind: consistent spacing, font, and color scheme
  - Alt text for all images
- [X] Responsive behavior:
  - Stack layout for mobile (hero, then methods, then form)
  - Use columns on desktop
- [X] i18n support:
  - Use `t('contact.hero')`, `t('contact.form.name')`, etc.
- [X] SEO metadata:
  - Set `<title>Contact Us – Birdnest Shop</title>`
  - Include meta description and Open Graph tags


### 12. Settings Page [Admin] Implementation [X]

Path: `app/(admin)/settings/page.tsx`

- [X] UI
  - Use `SettingsForm` component
  - Shadcn UI form with sections:
    - General (Store name, email, phone)
    - Branding (Logo upload)
    - Location (Address, country)
    - Order / Checkout (Currency, tax %, free shipping threshold, enable COD)
    - Payment methods toggles: Stripe / Momo / COD
    - Language default: `en` or `vi`
    - Maintenance mode toggle
  - Use `useForm` from `react-hook-form` + `zod` schema for validation
  - Persist state via API (`/api/settings`)

- [X] Data Fetching
  - Server-side load existing values via `getServerSideProps()` or `getSettings()` helper

- [X] API Endpoint (if missing, auto-generate)
  - Route: `POST /api/settings`
  - Create new handler under `app/api/settings/route.ts`
  - Save to `Settings` table (or key-value config store)
  - Use Prisma schema:

    ```ts
    model Setting {
      id         String   @id @default(cuid())
      key        String   @unique
      value      String
      createdAt  DateTime @default(now())
      updatedAt  DateTime @updatedAt
    }
    ```

  - Example keys:
    - `store_name`, `store_email`, `default_language`, `logo_url`, `free_shipping_threshold`, `maintenance_mode`, etc.

- [X] Auto-Prompt: if `Setting` table or endpoint `/api/settings` doesn't exist, prompt Cursor to:
  - Scaffold the table using Prisma
  - Scaffold `route.ts` with `GET`, `POST`, and optional `PUT`

- [X] Localization Support
  - Wrap all labels with `t('settings.general.store_name')` for i18n
  - Support both `en` and `vi`

- [X] Validation (Zod Schema)
  ```ts
  const settingsSchema = z.object({
    storeName: z.string().min(2),
    email: z.string().email(),
    phone: z.string().optional(),
    defaultLanguage: z.enum(['en', 'vi']),
    currency: z.string().min(1),
    taxPercent: z.number().min(0).max(100),
    freeShippingThreshold: z.number().min(0),
    enableStripe: z.boolean(),
    enableMomo: z.boolean(),
    enableCOD: z.boolean(),
    maintenanceMode: z.boolean(),
  });

## 🧠 Notes

- Use a `SettingsService` utility to map key-value store to/from JSON config
- Reuse these settings across the app by loading on server + caching
- This approach is extensible and scalable for future additions (e.g. themes, business hours)

---

Would you like me to generate the initial UI code or the Prisma `Setting` model + API handler next?

---

### 13. Notification System for Admin & Users [X]

#### General Goals
- [X] 🔔 Display notifications for both **Admin Dashboard** and **Customer UI**
- [X] Design scalable notification model with support for:
  - Role-based filtering (admin vs. user)
  - Type-specific styling (e.g. order updates, system alerts)
  - Read/unread status

---

## 1. Database Schema (Prisma)

```ts
model Notification {
  id        String   @id @default(cuid())
  title     String
  body      String?
  type      NotificationType
  recipientType RecipientType // enum: ADMIN or USER
  userId    String?           // nullable if sent to all users/admins
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?    @relation(fields: [userId], references: [id])
}

enum NotificationType {
  ORDER
  STOCK
  PAYMENT
  SYSTEM
  PROMOTION
}

enum RecipientType {
  ADMIN
  USER
}
```

## 2. Backend API (NestJS)

- [X] `GET /notifications` – Fetch notifications for the current user  
  - Use JWT to detect role (admin/user) and filter accordingly.

- [X] `PATCH /notifications/:id/read` – Mark a notification as read.

- [X] `PATCH /notifications/read-all` – Mark all notifications as read for the current user.

- [X] `POST /notifications` – Allow system/manual creation  
  - Include `recipientType` and optional `userId`.  
  - Validate access using guards.

- [X] `GET /notifications/unread-count` – Get unread notification count.

- [X] `DELETE /notifications/:id` – Delete a notification.

> ✅ Use Swagger to document each route at `/api-docs`.

---

## 3. Frontend – Admin Panel (Shadcn + Cursor)

- [X] 🔔 Notification bell in top nav bar.
- [X] 🔴 Red badge displayed when there are unread notifications.
- [X] 🔽 Dropdown includes:
  - Type icon
  - Title + preview of body
  - Time ago
  - "Mark all as read" button

**UX Enhancements:**
- [X] Group by date (e.g., Today / Yesterday).
- [X] Loading and empty states.
- [X] Delete individual notifications.

---

## 4. Frontend – User UI (Customer Site)

- [X] 🔔 Bell icon in the navbar.
- [X] `/notifications` route for full notification history.
- [X] Filter only notifications with `USER` recipientType.

**Types to show:**
- [X] Promotions
- [X] Order status updates
- [X] Payment alerts

---

## 5. Real-time (Optional)

- [X] Polling mechanism (every 30 seconds).
- [X] Update unread count in real time.
- [X] Refresh notifications on page load.

---

## 6. Best Practices

- [X] Use DTOs and validation (`class-validator`).
- [X] Extract logic into a reusable `NotificationService`.
- [X] Maintain consistent typings between backend and frontend.
- [X] Use timezone-aware formatting (`date-fns`).
- [X] Secure all endpoints with role guards and user identity checks.
- [X] Track unread count in layout context for global badge updates.

---

## 7. Testing

- [X] Backend unit tests for controllers and services.
- [X] Frontend component tests (e.g., dropdown, icon).
- [X] End-to-end tests for API endpoints.



### 14. Guest Order Lookup Feature (For Non-Logged-in Users) [X]

- [X] Create `app/guest-orders/page.tsx` using Next.js App Router

- [X] Hero Section:
  - Title: "Tra cứu đơn hàng"
  - Short subtitle explaining the feature (e.g. "Nhập email hoặc số điện thoại để kiểm tra đơn hàng của bạn")

- [X] Search Form:
  - Input field for email or phone
  - Submit button to trigger API call
  - Show loading state while waiting

- [X] Search Result Section:
  - Display matching orders: Order ID, Created At, Status
  - Empty state message if no result

- [X] API Integration:
  - Create backend endpoint `POST /api/orders/guest/search`
  - Accepts: `{ query: string }` (email or phone)
  - Query DB using Prisma:
    ```ts
    where: {
      OR: [
        { guestEmail: query },
        { guestPhone: query }
      ]
    }
    ```
    - Select: `id`, `createdAt`, `status`

- [X] Prisma Schema Update:
  - Add `guestEmail`, `guestPhone` fields to `Order` model
  - Run migration:
    ```bash
    npx prisma migrate dev --name add_guest_fields
    ```

- [X] Search Entry in Header:
  - Add "Track Order" to navbar or search bar (optional)
  - Route to `/guest-orders` when clicked

- [X] UI/UX Details:
  - Show alert or success message after search
  - Use Tailwind for padding, border, spacing, etc.
  - Format `createdAt` using:
    ```ts
    new Date(order.createdAt).toLocaleString()
    ```

- [X] Responsive Design:
  - Stack layout on mobile
  - Clean list view on larger screens

- [X] Optional Enhancements:
  - Group results by status (e.g. "Processing", "Shipped", "Completed")
  - Animate result section on load

- [X] i18n Support:
  - Use translation keys like `t('guest_orders.title')`, `t('guest_orders.placeholder')`, etc.

- [X] SEO Metadata:
  - `<title>Track Order – Birdnest Shop</title>`
  - Add meta description for guest order tracking

- [X] **FIXED**: Prisma client regeneration issue - regenerated client after adding guest fields to Order model
- [X] **FIXED**: Created test guest orders for testing the functionality
- [X] **VERIFIED**: Guest order search API working correctly with both email and phone queries


### 16. Optimize Home Page Layout and Content [X]

- [X] Update `app/page.tsx` (Home page) to improve overall structure and UX
- [X] Apply brand-aligned visual hierarchy:
  - Use consistent spacing, font sizing, and section padding (Tailwind)
  - Ensure alignment and spacing match the rest of the site
- [X] Hero Section:
  - Large banner with high-quality lifestyle/product image
  - Strong headline (e.g. "Discover Your Style at Birdnest")
  - Short supporting subtitle and CTA (e.g. "Shop Now" button)
- [X] Featured Categories:
  - Display 3–6 top-level categories with images and links
  - Responsive grid layout, center-aligned text
- [X] Product Highlights:
  - Show bestsellers / new arrivals / seasonal promotions
  - Use reusable product card component
  - Support "Add to Cart" or "View Details"
- [X] Promotional Banner:
  - Add promotional strip (e.g. "Free Shipping on Orders over 500K VND")
  - Use brand color and good contrast
- [X] Testimonials (optional):
  - Add section with 1–3 short customer testimonials
  - Name, image, and short quote
- [X] Newsletter Signup:
  - Form with name and email
  - Connected to backend or just UI for now
- [X] Footer Teaser:
  - Include key links (Shipping, Returns, Contact)
  - Match footer design

- [X] Responsive Design:
  - Stack layout for mobile
  - Use columns and grid for desktop
  - Test breakpoints across sizes

- [X] SEO:
  - Set `<title>Birdnest – Modern Fashion & Lifestyle</title>`
  - Add meta description
  - Include alt text on all images

- [X] i18n Support:
  - Wrap all visible texts in `t()` with keys like `home.hero.title`, `home.cta.button`, etc.

- [X] Best Practices:
  - Split sections into reusable components
  - Avoid hardcoded values, use `@/lib/constants.ts` or config files
  - Use loading skeletons for async product data

- [X] Testing:
  - Add basic unit test for Hero and Featured section
  - Ensure all links and CTA buttons work

---

### 17. Improve Desktop Navbar UI/UX with Sidebar Menu [X]

- [X] Optimize navbar in `components/ResponsiveNavbar.tsx` for better structure and accessibility
- [X] Add hamburger icon to the **left-most side** (similar to YouTube style)
  - Only visible on desktop if sidebar layout is used
  - Use icon from `lucide-react` or `heroicons`
  - Icon should open a collapsible sidebar or drawer from the left

- [X] Sidebar Menu (Slide-in from left):
  - Triggered by hamburger icon
  - Contains navigation links: Home, Products, About, Contact, Track Order
  - Optional: include category links or shortcuts
  - Use `@/components/ui/drawer` from Shadcn UI (or `Dialog` component)
  - Include close button or click-away to dismiss

- [X] Adjust layout to avoid header overflow:
  - Ensure the full navbar is always visible at 100% width
  - Prevent hamburger from being hidden or overlapping with logo

- [X] Keep right-side controls:
  - Search bar
  - Cart icon
  - Notification (optional)
  - Sign in button

- [X] Use Tailwind spacing and z-index:
  - Keep spacing consistent (`px-4 md:px-6`, `gap-x-4`)
  - Set proper `z-50` for navbar and sidebar layers

- [X] Responsiveness:
  - Keep mobile-friendly menu as is (or share logic)
  - For desktop, detect and handle window resizing
  - Sidebar should animate in/out smoothly

- [X] Accessibility:
  - Add `aria-label` and `aria-expanded` for hamburger
  - Sidebar should trap focus when open

- [X] Visual style:
  - Match existing color scheme and typography
  - Use border or shadow for sidebar

- [X] Testing:
  - Ensure sidebar opens/closes properly on desktop
  - Ensure no layout shift or broken spacing occurs on different screen sizes

- [X] Additional Improvements:
  - [X] Small left sidebar (80px width) with icons and text underneath
  - [X] Hamburger button in left sidebar to open full sidebar
  - [X] Cart kept in top menu bar for all screen sizes
  - [X] Removed hamburger from top menu bar
  - [X] Fixed guest-orders page parsing error


### 18. Add Scroll-triggered Animations to Home Page Sections [X]

- [X] Use `framer-motion` to animate appearance of major homepage components (hero, features, testimonials, etc.)
- [X] Use `useInView` from `framer-motion` or `react-intersection-observer` to trigger animations when component scrolls into view
- [X] Apply animation variants for each section:
  - Hero: `fadeIn` with `scale` (zoom-in)
  - Section titles: `slideUp` or `fadeIn`
  - Cards or images: `staggered fadeIn` from bottom
- [X] Ensure animations only trigger once per page load (using `triggerOnce`)
- [X] Add responsive performance optimization (e.g. limit animation on mobile if needed)
- [X] Keep transitions smooth with ease-out curve and duration ~0.6s
- [X] Ensure accessibility (no critical info hidden until animation completes)
- [X] Keep animation subtle and brand-aligned (not overly flashy)

> Goal: Create a polished first-impression with smooth content appearance as user scrolls.

---

### 19. Update Login Form Styling to Match Global Design System [X]

- [X] File: `app/(auth)/login/page.tsx`
- [X] Align layout and visual style with pages like `app/contact/page.tsx`, `app/products/page.tsx`, etc.
- [X] Apply consistent spacing, padding, and border-radius using Tailwind utility classes
- [X] Use same font family, text sizes, and font weight as other form sections (e.g. checkout, contact)
- [X] Sync input field styling:
  - Consistent height, focus ring, and placeholder color
  - Use `shadcn/ui` `Input` and `Label` components if available
- [X] Align button design with primary CTA buttons:
  - Consistent size, color, hover state, icon placement (if any)
- [X] Add error state visuals matching rest of site (e.g. red border, small helper text)
- [X] Use centered or split layout depending on current global style
- [X] Ensure form is responsive and adapts to mobile layout properly
- [X] Ensure light/dark theme (if supported) is respected
- [X] Ensure accessibility: `aria-label`, `htmlFor`, and semantic markup

---

### 20. Update `/cart` Page Style and UX [X]

- [ ] Path: `app/cart/page.tsx`
- [ ] Purpose: Align cart page with overall brand styling and UX

#### 🧱 Page Structure
- [ ] Page heading: `Your Cart` with item count (e.g. `Your Cart (3 items)`)
- [ ] Two-column layout on desktop:
  - Left: Cart items list
  - Right: Order summary
- [ ] Stack layout on mobile

#### 🛒 Cart Items List
- [ ] Loop over cart items using reusable `<CartItem />` component:
  - Product image thumbnail (lazy loaded)
  - Title (clickable to product page)
  - Options (e.g. size, color if applicable)
  - Quantity selector (dropdown or +/-)
  - Price per item
  - Remove button (`<Button variant="ghost" size="icon">`)

- [ ] Use dividers or cards to separate each item (`border-b py-4`)

#### 📦 Order Summary
- [ ] Box with:
  - Subtotal
  - Shipping (if calculated)
  - Discount (if applied)
  - Total (bold)
- [ ] Checkout button:
  - Full width
  - Disabled if cart is empty
  - Redirects to `/checkout`

#### ❌ Empty Cart UX
- [ ] If no items:
  - Show centered illustration (optional) + “Your cart is empty”
  - Link: `Continue shopping →` (to `/products`)

#### 🧑 Auth Considerations
- [ ] If user not logged in:
  - Allow checkout as guest
  - Sync cart with localStorage or session if available

#### 🎨 Styling Guidelines
- [ ] Tailwind classes: `grid`, `gap-6`, `bg-card`, `rounded-lg`, `shadow`, `dark:` variants
- [ ] Responsive: 
  - `grid-cols-1 md:grid-cols-3` (2 cols for cart + 1 col for summary)
  - Collapsible or stacked on small screens

#### 🧪 QA & UX Checks
- [ ] Consistent spacing and typography
- [ ] Mobile/desktop experience
- [ ] Correct price formatting
- [ ] Edge cases: 1 item, many items, item out of stock

---

### 21. Refactor `/checkout` Page for Consistent UX [X]

- [ ] Path: `app/checkout/page.tsx`
- [ ] Goal: Ensure the checkout flow is clean, mobile-friendly, and consistent with brand design

#### 🧾 Page Structure
- [ ] Page title: `Checkout` (with step indicator if needed)
- [ ] Two-column layout (on desktop):
  - Left: Shipping info + Payment method
  - Right: Order Summary
- [ ] Single-column stacked layout on mobile

#### 🧍 Shipping Information
- [ ] Form fields:
  - Full Name, Email, Phone
  - Address: Street, City, Province, ZIP
  - Optional: Notes
- [ ] Use `react-hook-form` with `zod` or `yup` validation
- [ ] Inputs styled with `shadcn/ui` (use `<Input />`, `<Textarea />`, `<FormField />`)


#### 📦 Order Summary
- [ ] Component reused from cart page:
  - Items with quantity
  - Subtotal, Shipping, Discount, Total
- [ ] Promo code input (optional)
- [ ] Button: `Place Order`
  - Disable during submission
  - Show spinner/loading
  - Redirect to `/order-success` or `/orders/:id`

#### ✅ UX Enhancements
- [ ] Loading state between steps (e.g. during Stripe processing)
- [ ] Real-time validation
- [ ] Prevent double submit
- [ ] Show error toast if failure

#### 🌐 Responsive Layout
- [ ] `grid-cols-1 md:grid-cols-[2fr_1fr] gap-8`
- [ ] Use `scroll-mt-20` for section linking (if multi-step)

#### 🔐 Auth & Access
- [ ] Allow guest checkout (check session + email)
- [ ] Optional: Pre-fill form if user is logged in
- [ ] Add client-side redirect if cart is empty

#### 🧪 Testing
- [ ] Form input validation
- [ ] Payment method toggle
- [ ] Mobile flow
- [ ] Edge cases: invalid phone, empty fields, failed payment

#### 🧁 Styling & i18n
- [ ] Tailwind + Shadcn components
- [ ] Use `t('checkout.shipping.address')`, etc.
- [ ] Semantic HTML for accessibility

---

### 22. Implement `/payment` Page [X]

- [ ] Path: `app/payment/page.tsx`
- [ ] Purpose: Final step of checkout to handle secure payment
- [ ] Redirect from `/checkout` after shipping info is saved

#### 💡 Page Setup
- [ ] Page title: "Secure Payment"
- [ ] Back button: to return to `/checkout`
- [ ] Show progress indicator (e.g. Step 2 of 2)

#### 💳 Payment Methods
- [ ] Radio group or tab selector (Shadcn UI):
  - Stripe (Card payment)
  - Momo (QR scan)
  - Bank Transfer (ATM)
  - Cash on Delivery
- [ ] Use `<RadioGroup>` with icons for clarity

##### 🎴 Stripe (Card Payment)
- [ ] Integrate Stripe Elements for secure input
- [ ] Fields: Card Number, Expiry, CVC
- [ ] Real-time validation
- [ ] Show loading while processing

##### 📱 Momo
- [ ] Display QR code for Momo scan
- [ ] Include copy button for order code
- [ ] Button: "I have paid" to confirm manually

##### 🏦 Bank Transfer
- [ ] Show bank account details
- [ ] Field: "Transfer note"
- [ ] Upload screenshot (optional)

##### 💵 COD (Cash on Delivery)
- [ ] Confirm address and estimated delivery date
- [ ] Just one confirm button: "Place Order"

#### 🧾 Order Summary Sidebar
- [ ] Show: Items, Quantity, Subtotal, Shipping, Total
- [ ] Option to edit cart (link to `/cart`)
- [ ] Disable editing from here

#### ✅ Final Actions
- [ ] Button: `Complete Payment`
  - Validate form before submission
  - Disable + loading spinner while processing
- [ ] On success:
  - Redirect to `/order-success`
- [ ] On error:
  - Show toast with retry option

#### 📱 Responsive Layout
- [ ] Desktop: 2 columns (payment left, summary right)
- [ ] Mobile: stacked layout with sticky "Complete Payment" button

#### 🌐 i18n Support
- [ ] Use translation keys: `t('payment.method.title')`, `t('payment.total')`, etc.
- [ ] Fallback to English if not available

#### 🧪 Testing
- [ ] Stripe form renders and submits correctly
- [ ] Momo QR works
- [ ] Bank transfer details visible and copyable
- [ ] Loading state
- [ ] Success + error flow

#### 🧁 Styling
- [ ] Use Shadcn UI and Tailwind
- [ ] Match theme: border, radius, font weight
- [ ] Light/dark mode consistent

---

### 23. Product Detail Page `/product/[slug]` [X]

- [X] Path: `app/products/[slug]/page.tsx`
- [X] Purpose: Show full product info and actions for user to buy
- [X] Use `slug` param from URL to fetch product via API or `getProductBySlug(slug)`

#### 🖼️ Hero Section
- [X] Responsive Image Gallery (main + thumbnails):
  - Support multiple images
  - Zoom-in on hover (desktop), swipe on mobile
  - Show fallback if no image
- [X] Product Name + Short Description
- [X] Category, SKU, and Brand (optional)

#### 💰 Price and Purchase Options
- [X] Price with currency formatting (`VND`)
- [X] Display discount if available (old price + percentage)
- [X] Quantity selector (min 1, max by stock)
- [X] Button: "Add to Cart" → `POST /api/cart`
- [X] Button: "Buy Now" → Redirect to `/checkout`

#### 📦 Stock + Shipping Info
- [X] Stock level indicator (in stock / out of stock)
- [X] Estimated delivery (e.g. "2–4 days")
- [X] Free shipping badge (if eligible)

#### 📝 Full Description Section
- [X] Tabs or accordion:
  - Description
  - Specifications (optional: size, material, etc.)
  - Reviews (see below)
- [X] Rich text rendering (e.g. using `dangerouslySetInnerHTML` or custom MD parser)

#### ⭐ Reviews Section (Optional)
- [X] Average rating stars
- [X] User reviews: name, rating, text, time
- [X] Add Review form (auth only)

#### 🔁 Related Products
- [X] "You may also like" or "Similar items"
- [X] Carousel or grid, fetch by category/tag

#### 🧭 Breadcrumbs (SEO + UX)
- [X] Home / Category / Product Name

#### 🌐 SEO & Open Graph
- [X] `<title>{product.name} – Birdnest</title>`
- [X] `<meta name="description" content={product.shortDescription} />`
- [X] Open Graph tags:
  - `og:image`, `og:title`, `og:url`, etc.

#### 🎨 Styling
- [X] Use Shadcn UI + Tailwind
- [X] Match design system: padding, spacing, font weights
- [X] Mobile-first layout
- [X] Alt text for images, label all inputs for a11y

#### 🧪 UX Enhancements
- [X] Skeleton loader while fetching data
- [X] Toast feedback for actions (cart, error, etc.)
- [X] Scroll to top on page change
- [X] Smooth scroll to sections (reviews, specs)

#### 🧪 Responsive Behavior
- [X] Mobile: stack layout (image > details > action)
- [X] Desktop: 2-column layout (gallery left, details right)

#### 🌐 i18n Support
- [X] Translation keys:
  - `t('product.add_to_cart')`, `t('product.in_stock')`, etc.

#### ⚠️ Edge Case Handling
- [X] Product not found: show 404
- [X] Out of stock: disable purchase buttons
- [X] Handle long product names gracefully

---

### 24. Add Modern Loading UI for Page Transitions [X]

- [X] Goal: Show loading feedback during route changes for better UX

#### 🔁 Use Next.js App Router Events
- [X] Track router state using `useRouter` from `next/navigation` or `next/router`
- [X] Detect route change start and complete events to trigger loading

#### 💡 Option A: Top Progress Bar (Recommended)
- [X] Use `nprogress` for sleek top progress bar
  - Install: `npm install nprogress`
  - Import global styles: `import 'nprogress/nprogress.css'`
  - Configure in a layout or custom hook
- [X] Show progress on `routeChangeStart`, hide on `routeChangeComplete` / `routeChangeError`

#### 💡 Option B: Fullscreen or Section Loader
- [X] Use `loading.tsx` in each route segment to show loading fallback
- [X] Or create a global `LoadingOverlay` component with animated spinner

#### 💄 Design Requirements:
- [X] Match brand color for progress bar or spinner
- [X] Ensure the loader is lightweight and does not block interaction
- [X] Optional: fade-in/fade-out transition on loader appearance

#### 🧪 Test:
- [X] Navigate between pages and ensure the loader is smooth and unobtrusive
- [X] Confirm loader disappears immediately after page load
- [X] Works in light and dark themes

---

### 25. Authentication & Authorization Best Practice Audit [X]

#### 🛡️ Backend Auth (NestJS + Prisma) [X]

- [X] Ensure JWT AuthGuard is globally or selectively applied:
  - Protect routes like `/api/user`, `/api/order`, `/api/cart`, `/api/admin/*`
  - Use `@UseGuards(AuthGuard)` with role-based `@Roles()` where needed
- [X] Decode JWT from `Authorization: Bearer <token>` or cookies
- [X] Validate token expiration and user existence in DB
- [X] Handle auth errors gracefully (401, 403) with standard response format
- [X] Add middleware to log suspicious or failed login attempts
- [X] Sanitize sensitive fields when returning user data (remove password, etc.)

#### 🔒 Role-Based Access Control (RBAC) [X]

- [X] Add `role` field in `User` model (`USER`, `ADMIN`, etc.)
- [X] In protected endpoints, check roles:
  - e.g., `@Roles('ADMIN')` to restrict admin APIs
- [X] In Prisma queries, filter based on user ID for user-specific data (e.g. orders)

---

#### 🧭 Frontend Auth (Next.js 15 + App Router + NextAuth.js) [X]

- [X] Use `useSession()` or `auth()` (server-side) to access session info
- [X] Add `middleware.ts` to protect routes (e.g. `/checkout`, `/account`, `/admin`)
  - Example: check session, redirect to `/login` if unauthenticated
- [X] Hide/show UI elements (e.g. profile dropdown, cart actions) based on auth
- [X] Sync layout state with session:
  - Show skeleton/loading when session is being fetched
  - Avoid flash of unauthenticated state (Flicker)
- [X] Auto-refresh token on expiry if using JWT
- [X] Store user info in global state (e.g. Zustand) and sync with session

---

#### 🧪 Pages Auth Flow Validation [X]

- [X] ✅ `/login`: Redirect to `/` if already logged in
- [X] ✅ `/signup`: Redirect to `/` if logged in
- [X] ✅ `/checkout`: Protected, must login before access
- [X] ✅ `/payment`: Protected, and ensure valid order context
- [X] ✅ `/admin`: Admin only – redirect or 403 for others
- [X] ✅ `/account`, `/orders`: Must be logged in

---

#### 🧪 UX & Security Enhancements [X]

- [X] Protect all forms (login, signup, contact) from CSRF
- [X] Show login-required toast if accessing protected features while logged out
- [X] Add logout confirmation and expiration auto-logout
- [X] Responsive error pages for 401, 403, 404
- [X] `meta` tag: `<meta name="referrer" content="no-referrer">` for privacy

---

#### 🌐 i18n & Accessibility [X]

- [X] Use `t('auth.login')`, `t('auth.signup')`, etc.
- [X] All inputs have `label` or `aria-label`
- [X] Keyboard navigable forms and buttons

---

#### 🔧 Authentication Integration Fix [X]

- [X] **FIXED**: Menu bar showing "Đăng nhập" after login
- [X] **FIXED**: Dual authentication system integration (custom API + NextAuth)
- [X] **FIXED**: Unified authentication state handling in navbar
- [X] **FIXED**: Proper logout for both authentication methods
- [X] **FIXED**: Real-time authentication state updates

---

### 26. User Dashboard – UI Unification with Main Website [X]

#### 🧩 Global Layout Integration

- [ ] Refactor all `/dashboard/*` pages to use a shared layout:
  - Create `app/dashboard/layout.tsx` if not yet defined
  - Include left sidebar navigation (or top tabs on mobile)
  - Keep `main` content area responsive with consistent padding
- [ ] Add `<title>` and SEO metadata for each page

---

#### 🎨 Unified Styling

- [ ] Sync all dashboard pages with main website styling:
  - Use Tailwind CSS + Shadcn UI components
  - Align spacing, font sizes, color palette (e.g. `text-foreground`, `bg-muted`)
  - Consistent header structure: title, subtitle, optional actions
- [ ] Apply consistent UI patterns: `Card`, `Tabs`, `Badge`, `Skeleton`, `Alert`
- [ ] Responsive layout: stack on mobile, grid on desktop

---

#### 🧾 Orders – `/dashboard/orders`

- [ ] Display orders in table/card list format
  - Columns: Order ID, Date, Status, Total, Action
- [ ] Add “View Details” button → `/dashboard/orders/[id]`
- [ ] Empty state: friendly illustration + link to `/products`

---

#### 👤 Profile – `/dashboard/profile`

- [ ] Editable fields: name, email, phone, avatar upload
- [ ] Save changes with validation & toast feedback
- [ ] Support password/email update if applicable

---

#### 📍 Addresses – `/dashboard/addresses`

- [ ] Show all saved addresses with label (home/work), type (shipping/billing)
- [x] Add/Edit/Delete via modal or drawer:
  - Use `Dialog` or `Sheet` from Shadcn UI
  - Fields: Full name, phone, address line, city, province, postal code
  - Show validation errors inline
  - Include "Set as default" toggle
- [ ] Support responsive behavior and keyboard navigation

---

#### 💖 Wishlist – `/dashboard/wishlist`

- [ ] Display favorite products as a responsive grid
- [ ] Each item shows image, name, price, stock badge, remove button
- [ ] CTA to add to cart
- [ ] Empty state with animation or helpful link

---

#### 🔔 Notifications – `/dashboard/notifications`

- [ ] List notifications with icon, title, timestamp
- [ ] Group by date: Today, This Week, Earlier
- [ ] Unread badge, toggle read status, clear all
- [ ] Email toggle (on/off)

---

#### 🧩 Add/Edit Modal Enhancements for Dashboard Tables

- [ ] Convert all inline forms to modals or drawers using `Dialog` / `Sheet`:
  - Orders (view detail)
  - Addresses (add/edit)
  - Profile update
  - Wishlist actions (optional)
- [ ] Ensure proper focus trapping and ESC key behavior
- [ ] Include loading states on submit
- [ ] Use consistent form layout: vertical spacing, aligned inputs, button group
- [ ] Responsive modal size: `sm` on mobile, `lg` on desktop
- [ ] Show toast/snackbar feedback after successful action

---

#### 🧠 UX & Session Handling

- [ ] Add `Breadcrumb` or page header (e.g. `Dashboard / Orders`)
- [ ] Use `useSession` to protect all dashboard routes
- [ ] Redirect to login if unauthenticated
- [ ] Animate section transitions using `framer-motion` (optional)
- [ ] Confirm all routes and forms are A11Y-friendly

---

#### 🧪 Testing

- [ ] Confirm UI is responsive across breakpoints
- [ ] Test all modals on mobile and desktop
- [ ] Validate data updates correctly and reflects immediately in UI
- [ ] Check visual consistency and performance

---

### 26. Image Upload with UploadThing [X]

- [X] Install dependencies:
  - [X] `uploadthing`
  - [X] `@uploadthing/react`
  - [X] `browser-image-compression` (optimize image before upload)

- [X] Backend:
  - [X] Add UploadThing environment variables to `.env`
    ```env
    UPLOADTHING_SECRET=sk_live_your-uploadthing-secret
    UPLOADTHING_APP_ID=your-uploadthing-app-id
    ```
  - [X] In `app/api/uploadthing/core.ts`:
    - [X] Define routers:
      - [X] `avatarUploader` (max 2MB, 1 image)
      - [X] `productImageUploader` (max 4MB, multiple)
      - [X] `generalImageUploader` (max 4MB, 5 images)
    - [X] Use:
      ```ts
      const f = createUploadthing();
      ```
  - [X] Add `app/api/uploadthing/route.ts` for handler

- [X] Frontend:
  - [X] Create `components/ui/ImageUpload.tsx`
    - [X] Props: `endpoint`, `onUpload`
    - [X] Use `UploadButton<OurFileRouter>`
    - [X] Optimize image before upload (max 1080px width, compress)
    - [X] Create `SimpleUploadButton` component for basic uploads

- [X] Integrate:
  - [X] Avatar upload: `/profile`, dashboard
  - [X] Product image: in add/edit modal (admin dashboard)

- [X] UI:
  - [X] Show image preview
  - [X] Loading and error state
  - [X] Remove image with X icon
  - [X] Drag and drop interface
  - [X] Progress indicators

- [X] Validation:
  - [X] Accept only `.png`, `.jpg`, `.jpeg`, `.webp`
  - [X] Avatar: 1 image only
  - [X] Product: multiple images
  - [X] File size limits
  - [X] Role-based access control

- [X] Save uploaded URL to DB
- [X] Style with Tailwind CSS + Shadcn UI
- [X] Create example component (`ImageUploadExample.tsx`)
- [X] Create test page (`/test-upload`)
- [X] Add comprehensive documentation (`IMAGE_UPLOAD_README.md`)

---

### 27. Order Detail Page `/dashboard/orders/[orderId]` [X]

- [ ] **Route Setup**
  - Create dynamic route: `app/dashboard/orders/[orderId]/page.tsx`
  - Protect page with auth middleware:
    - Only allow logged-in user who owns the order
    - Or allow admin access

- [ ] **Data Fetching**
  - Use:
    ```ts
    prisma.order.findUnique({
      where: { id: orderId },
      include: { orderItems: { include: { product: true } } }
    })
    ```
  - Validate: `order.userId === session.user.id || session.user.role === 'ADMIN'`

- [ ] **Header Section**
  - Display:
    - Order ID
    - Order Date (formatted)
    - Status badge (Pending / Paid / Shipped / Cancelled)
    - Payment Method
    - Customer info: name, email, phone
  - Add link: "← Back to orders"

- [ ] **Shipping Info**
  - Card UI block with:
    - Full address
    - Icons for location, phone
    - Notes if available

- [ ] **Order Items**
  - Loop over `orderItems`
    - Show: product thumbnail, name, quantity, unit price, subtotal
  - Use responsive grid or table
  - Display:
    - Subtotal
    - Tax (if any)
    - Shipping Fee
    - Total

- [ ] **Admin Controls (if admin)**
  - Show dropdown to update order status
  - Option to resend invoice email

- [ ] **Style**
  - Use Tailwind + Shadcn UI components
  - Responsive design on mobile/tablet
  - Status badges with color variants

- [ ] **Optional Enhancements**
  - Timeline for order status (Placed → Shipped → Delivered)
  - Show invoice PDF download

---

### 28. Upload Filename Convention with Image Compression [✓ Best Practice]

- **Filename Format**:
  - `[type]-[entityId]-[timestamp].[ext]`
  - Examples:
    - `avatar-user123-20250729.jpg`
    - `product-456-1722260100.png`

- **Naming Rules**:
  - No Vietnamese accents
  - Lowercase only
  - Hyphen `-` for separation
  - No special characters
  - Extensions allowed: `.jpg`, `.jpeg`, `.png`, `.webp`
  - Use `userId` or `productId` + timestamp to ensure uniqueness

---

### Image Compression Before Upload

- Use [`browser-image-compression`](https://www.npmjs.com/package/browser-image-compression)
- Optimize image before upload to reduce bandwidth without sacrificing quality
 
```ts
import imageCompression from 'browser-image-compression';

const compressedFile = await imageCompression(file, {
  maxWidthOrHeight: 1080,
  maxSizeMB: 1.5,
  useWebWorker: true,
});
```

- Convert to .webp if possible before upload
- Keep high quality while minimizing file size
- UploadThing Integration
  - Backend (app/api/uploadthing/core.ts):
  - Allow larger files (e.g. 5MB for avatars, 8MB for products)
  ```ts
    avatarUploader: f({ image: { maxFileSize: "5MB" } })
    productImageUploader: f({ image: { maxFileSize: "8MB" } })
  ```
  - Rename file inside onUploadComplete using the naming convention

- UI / UX
  - Show image preview before upload
  - Show loading and error states
  - Support removing uploaded image via "X" icon
- Validation
  - Accept: .jpg, .jpeg, .png, .webp
  - Avatar: 1 image max
  - Product: multiple images allowed
  - Check file type and extension before upload
  - Ensure compressed size fits within UploadThing limits

- Environment
  - Store UPLOADTHING_TOKEN securely in Backend
  - Do not expose token in frontend

✅ Result: Optimized, uniquely named images uploaded safely with smooth UX across avatar and product image uploads.

---

### 20. CI/CD and Deployment Readiness [X]

- [X] Setup `.dockerignore`, `.env.example` files
- [X] Dockerize backend with production-ready Dockerfile
- [X] Create `docker-compose.yml` for local development
- [X] Setup GitHub Actions or CI:
  - Lint, test, build on PRs
- [X] Deploy backend to Railway, Fly.io, VPS or Render
- [X] Setup reverse proxy or subdomain for API (e.g. `api.birdnest.shop`)
- [X] Setup health check route
- [X] Optional: Use UptimeRobot to monitor API uptime

---

### 21. Observability and Logging [X]

- [X] Add global error handler middleware (backend)
- [X] Add structured logs (`logger.service.ts` or `pino`)
- [X] Track user events (e.g. order success, payment failure)
- [X] Optional: Integrate error monitoring (Sentry / Logtail / Datadog)

---

### 22. Documentation and Developer Experience [X]

- [X] Generate Swagger docs at `/api-docs`
- [X] Write `README.md` inside `backend/`:
  - Setup instructions, run, envs, API overview
- [X] Add comments and typing to all exposed APIs
- [X] Document common error messages and responses
- [X] Provide sample curl or Postman collection
- [X] Optional: Add API versioning (e.g. `/api/v1/`)
