# Cursor Rules

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

## Lessons

## Scratchpad

### 1. Project Setup and Configuration []

- [X] Initialize Next.js 15 project with TypeScript
- [X] Set up project structure and folders
- [X] Configure ESLint and Prettier
- [X] Install and configure dependencies:
  - Shadcn UI components
  - Lucide icons
  - Zod for validation
  - Zustand for state management
  - Recharts for analytics
  - Resend for emails
  - Uploadthing for file uploads
  - Prisma ORM
  - PostgreSQL database
  - NextAuth.js beta for authentication
  - Stripe for payments

### 2. Database and Authentication []

- [X] Set up PostgreSQL database
- [X] Configure Prisma schema:
  - User model
  - Product model
  - Category model
  - Order model
  - Review model
  - Cart model
- [X] Implement NextAuth.js authentication:
  - Email/Password
  - OAuth providers (Google, GitHub)
  - JWT handling
  - Protected routes

### 3. Core Features - Customer Side [ ]

- [X] Home Layout:
  - Create `(home)` folder in the `app` directory  
  - Header with logo, search bar, and navigation (Home, Products, About, Contact)  
  - Footer with links (Purchase Policy, Delivery, Return & Exchange) and social media (Facebook, Zalo, Instagram)

- [X] Homepage:
  - Banner carousel (images of bird's nest, gift combos, promotions)  
  - Latest bird's nest products  
  - Premium bird's nest combos

- [X] Products Catalog:
  - Sidebar with categories and filters:  
    - Nest type: Refined Nest, Raw Nest, Feather-removed Nest  
    - Origin: Kien Giang  
    - Weight: 50g, 100g, 200g  
    - Price range  
  - Search results  
  - Product grid  
  - Pagination

- [X] Product pages:
  - Create product detail page layout  
  - Implement image gallery with thumbnails  
  - Add product information section:  
    - Product name, price, full description  
    - Stock status (in stock / out of stock)  
    - Add to cart button  
  - Reviews and ratings section:  
    - Display existing reviews  
    - Add review form for authenticated users  
    - Star rating component  
  - Related products section:  
    - Show products from the same category  
    - Product card carousel

- [X] Shopping cart:
  - Add/remove items  
  - Update quantities  
  - Cart persistence (via localStorage or Zustand)

- [X] Checkout process:
  - Shipping information (Full name, phone number, delivery address)  
  - Payment integration (Stripe — international, extendable to Momo/VNPAY later)  
  - Order confirmation page with order ID

- [X] User dashboard:
  - Order history (with status tracking)  
  - Profile management (personal info, password change)  
  - Saved addresses  
  - Wishlist (favorite products)


### 4. Admin Dashboard [ ]

- [X] Admin authentication and authorization (Implemented: /admin route, only accessible by isAdmin users, unauthorized users redirected)
- [X] Dashboard overview:
  - [X] Layout and Structure:
    - Create admin dashboard layout with sidebar navigation
    - Implement responsive grid for dashboard widgets
    - Add loading states and error boundaries
  - [X] Key Metrics Cards:
    - Total revenue widget with real data
    - Total orders widget with real data
    - Total customers widget with real data
    - Average order value widget with real data
  - [X] Sales Analytics:
    - [X] Revenue Chart:
      - Implement line chart using Recharts
      - Add daily/weekly/monthly/yearly filters
      - Show revenue trends over time
      - Add tooltip with detailed information
    - [X] Order Statistics:
      - Bar chart for order volume
      - Order status distribution
      - Peak ordering times
  - [X] Recent Orders Table:
    - [X] Implement data table with columns:
      - Order ID
      - Customer name
      - Order total
      - Status
      - Date
    - [X] Add sorting and filtering
    - [X] Quick actions (view, process, update status)
  - [X] Low Stock Alerts:
    - Products with stock below threshold
    - Quick restock actions
    - Stock level indicators
  - [X] Top Products:
    - Best-selling products list
    - Revenue by product
    - Stock status
  - [X] Customer Insights:
    - New vs returning customers
    - Customer acquisition chart
    - Top customers by revenue
  - [X] Real-time Updates:
    - Implement WebSocket connection
    - Live order notifications
    - Stock level updates
  - [X] Export and Reports:
    - CSV/PDF export functionality
    - Custom date range selection
    - Report generation
- [X] Product management:
  - CRUD operations
  - Bulk actions
  - Image upload (Uploadthing)
- [X] Order management:
  - Order processing
  - Status updates
  - Refund handling
- [X] User management:
  - Customer list
  - Admin privileges
  - User actions

### 5. Backend - NestJS API Server [X]

#### Setup and Architecture
- [X] Create new backend using NestJS (TypeScript):
  - [X] Initialize NestJS project in `/backend`
  - [X] Configure environment variables (`.env` file exists)
  - [X] Set up Prisma ORM with PostgreSQL database
  - [X] Implement JWT authentication and authorization
  - [X] Add complete API endpoints:
    - `/api/products` (GET, POST, PUT, DELETE) - ✅ Working
    - `/api/orders` (create, read, update status) - ✅ Working
    - `/api/users` (list customers, admin privileges) - ✅ Working
    - `/api/auth` (login, register, JWT) - ✅ Working
- [X] CORS enabled for frontend origin (localhost:3000, 3001)
- [X] Swagger documentation accessible at `/swagger`
- [X] Unit tests included (Jest configuration)
- [X] Startup commands via npm scripts (`npm run start:dev`)
- [X] Backend runs independently on port `8080` and frontend uses this base URL

#### Auth and Middleware
- [X] Implement JWT authentication and middleware
- [X] Middleware for:
  - [X] Auth guard (admin / customer) - JWT strategy implemented
  - [X] Logging - NestJS built-in logging
  - [X] CORS - Enabled for frontend origins
  - [ ] Rate limiting (can be added if needed)

#### Features to Implement (Mirror Frontend Needs)
- [X] Auth API:
  - [X] Sign in, Sign up - JWT authentication implemented
  - [X] OAuth login handler (Google/Github if needed) - Can be extended
  - [ ] Password reset (stub for now)
- [X] Products API:
  - [X] CRUD for admin - Complete implementation
  - [X] Public product listing, filter, search - Working with real data
- [X] Orders API:
  - [X] Create order - Implemented
  - [X] Update order status - Implemented
  - [X] Get order history (user & admin) - Implemented
- [ ] Cart API:
  - [ ] Add/remove/update cart items (frontend uses localStorage)
- [ ] Dashboard metrics API:
  - [ ] Total revenue, customers, AOV
  - [ ] Order stats (daily/weekly)
- [ ] Reviews API:
  - [ ] Add review (user)
  - [ ] List reviews per product

#### Migration Tasks
- [X] Identify mock or real API logic currently implemented in frontend `/app/api/**`
- [X] Migrate each handler into NestJS equivalents in `/backend/src/`
  - [X] Convert TypeScript/Next.js handlers to NestJS controllers/services
  - [X] Use DTOs and request validation via `class-validator`
- [X] Reuse Prisma schema models - Direct integration with Prisma client
- [X] Replace direct DB logic with services following clean architecture

#### Frontend Integration
- [X] Remove mock data in frontend (e.g., `/lib/mock`, hardcoded arrays)
- [X] Replace all API calls to use new backend endpoints
  - [X] Use `fetch` or `axios` pointing to `http://localhost:8080/api`
  - [X] API base URL configured in `frontend/lib/api.ts`
- [X] Ensure frontend dynamic pages (Products, Orders, User Management) render using real backend data
- [X] Update frontend loading states, error handling if necessary

#### Best Practices
- [X] Follow clean architecture principles
- [X] Handle errors via structured error types
- [X] Use DTOs / request binding with validation
- [X] Implement pagination, sorting, filtering
- [X] Write unit tests for services (Jest configuration ready)
- [X] Swagger / OpenAPI for documentation (via `@nestjs/swagger`)
- [X] Prepare npm scripts for dev tools (`npm run start:dev`, `npm run test`)


### 6. Code Quality, Refactor, Optimization [X]

- [X] Use **ESLint** and **Prettier** for linting and formatting.
- [X] Add `npm run lint` and `npm run format` in both frontend/backend.
- [X] Clean up:
  - [X] Unused imports / variables - Fixed in frontend components
  - [X] Duplicate logic - Removed unused variables and imports
  - [X] Dead code - Cleaned up unused functions and variables
- [X] Extract reusable logic to `services/` or `utils/`.
  - [X] Created proper TypeScript interfaces in `frontend/lib/types.ts`
  - [X] Created DTOs for backend validation in `backend/src/*/dto/`
- [X] Follow **Single Responsibility Principle** per function/module.
  - [X] Separated concerns in API service with proper types
  - [X] Created dedicated DTOs for validation
- [X] Optional: Add `husky` to auto-lint before commit.

---

### 7. Testing and Reliability [X]

- [X] Backend Unit Tests:
  - [X] Use **Jest** (NestJS mặc định hỗ trợ)
  - [X] Test service logic, controller endpoints
  - [X] Created comprehensive tests for ProductsService and OrdersService
  - [X] Fixed controller error handling (NotFoundException for missing products)
- [X] Frontend Unit Tests:
  - [X] Use **Jest + React Testing Library**
  - [X] Test components, forms, and auth logic
  - [X] Set up Jest configuration and testing environment
  - [X] Created utility function tests as examples
- [X] API Integration Tests:
  - [X] Use **Supertest** (backend) for endpoint testing
  - [X] Mock database (e.g. SQLite or in-memory)
  - [X] Test edge cases: auth failure, invalid input, DB errors
  - [X] Created e2e tests for products API endpoints
- [X] End-to-End Tests (Automation):
  - [X] Use **Supertest** for API endpoint testing
  - [X] Simulate real user flows (product listing, filtering, search)
  - [X] Add scripts like `npm run test:e2e`
  - [X] All backend tests passing (20 unit tests, 10 e2e tests)
  - [X] Frontend testing setup complete with example tests

---

### 8. Security Best Practices [X]

- [X] Sanitize user inputs (e.g. `class-validator`, middleware)
  - [X] Created SecurityMiddleware for input sanitization
  - [X] Added frontend security utilities for XSS prevention
  - [X] Implemented HTML entity escaping and control character removal
- [X] Hash passwords with **bcrypt** (if managing auth manually)
  - [X] Created PasswordService with bcrypt integration
  - [X] Added password strength validation
  - [X] Implemented secure password comparison
- [X] Use Helmet or similar middlewares to set HTTP headers
  - [X] Added Helmet middleware for security headers
  - [X] Configured Content Security Policy (CSP) in Next.js
  - [X] Set X-Frame-Options, X-Content-Type-Options, etc.
- [X] Rate limit sensitive endpoints (auth, payments)
  - [X] Implemented ThrottlerModule with multiple rate limits
  - [X] Created custom ThrottleAuthGuard for authentication endpoints
  - [X] Added IP-based tracking for rate limiting
- [X] Validate all incoming data (DTOs in NestJS)
  - [X] Enhanced ValidationPipe with security options
  - [X] Added forbidNonWhitelisted and disableErrorMessages for production
  - [X] Implemented comprehensive DTOs with class-validator
- [X] Keep `.env` secrets out of source control
  - [X] Updated .gitignore files for both frontend and backend
  - [X] Created .env.example files with required variables
  - [X] Excluded sensitive files from version control
- [X] Restrict CORS to allowed origins
  - [X] Configured strict CORS with allowed origins from environment
  - [X] Limited HTTP methods and headers
  - [X] Added security headers configuration

---

### 9. Performance & UX Optimization [X]

- [X] Optimize frontend bundle size (code splitting, lazy loading)
  - [X] Created LazyComponents with dynamic imports for admin pages
  - [X] Implemented skeleton loading states for better UX
  - [X] Added lazy loading for Charts component
- [X] Add loading states to all async operations
  - [X] Created OptimizedLoadingSpinner component
  - [X] Added loading states to product lists and admin pages
  - [X] Implemented skeleton components for better perceived performance
- [X] Use `React.memo`, `useMemo`, `useCallback` where needed
  - [X] Created OptimizedComponents with memoization
  - [X] Implemented debounced search input
  - [X] Added optimized pagination with memoized handlers
  - [X] Created performance utilities (debounce, throttle, memoize)
- [X] Enable cache headers for static assets (Vercel auto)
  - [X] Backend cache service with TTL and invalidation
  - [X] Frontend API caching with pattern-based clearing
  - [X] Performance monitoring and metrics collection
- [X] Optional: Use `next/image` for optimized images
  - [X] Created image optimization utilities
  - [X] Implemented responsive image sizing
  - [X] Added lazy loading with placeholders

---

### 10. About Page Feature Implementation [X]

- [X] Create new `/about` page using Next.js app router (e.g. `app/about/page.tsx`)
- [X] Hero section: full-width banner image + mission tagline + CTA button
- [X] Story section: timeline cards or alternating left/right grid layout
- [X] Team section: introduce founders or small team, with portraits + roles
- [X] Social proof: logos of partners, media quotes, or testimonials
- [X] Design details:
  - Choose light or vibrant palette consistently
  - Use whitespace and typographic hierarchy
- [X] Responsive behavior:
  - Mobile-first layout
  - Conditionally show/hide sections if needed
- [X] Internationalization support:
  - Use `t('about.hero')`, `t('about.story.card1')`, etc.
- [X] Accessibility:
  - Images have alt text
  - Contrast meets WCAG standards
- [X] SEO:
  - Set meta tags: title, description, OG image

### 11. Contact Page Feature Implementation [X]

- [ ] Create `app/contact/page.tsx` using Next.js App Router
- [ ] Hero Section:
  - Full-width background image + tagline (e.g. “How can we help?”)
  - Short subtitle and form or CTA button to scroll
- [ ] Contact Methods Section:
  - Display email, phone, and operating hours
  - Optionally separate by inquiry type
- [ ] Inquiry Form:
  - Fields: Name, Email, Phone (optional), Topic (dropdown), Message
  - Submit handler connects to backend API `/api/contact`
  - Show confirmation prompt and response time estimate
- [ ] FAQ or Help Center Links:
  - Provide quick links under form (Shipping, Returns, Payment)
- [ ] Brand-aligned visuals and spacing:
  - Use Tailwind: consistent spacing, font, and color scheme
  - Alt text for all images
- [ ] Responsive behavior:
  - Stack layout for mobile (hero, then methods, then form)
  - Use columns on desktop
- [ ] i18n support:
  - Use `t('contact.hero')`, `t('contact.form.name')`, etc.
- [ ] SEO metadata:
  - Set `<title>Contact Us – Birdnest Shop</title>`
  - Include meta description and Open Graph tags


### 12. Settings Page [Admin] Implementation [X]

Path: `app/(admin)/settings/page.tsx`

- [ ] UI
  - Use `SettingsForm` component
  - Shadcn UI form with sections:
    - General (Store name, email, phone)
    - Branding (Logo upload)
    - Location (Address, country)
    - Order / Checkout (Currency, tax %, free shipping threshold, enable COD)
    - Payment methods toggles: Stripe / Momo / COD
    - Language default: `en` or `vi`
    - Maintenance mode toggle
  - Use `useForm` from `react-hook-form` + `zod` schema for validation
  - Persist state via API (`/api/settings`)

- [ ] Data Fetching
  - Server-side load existing values via `getServerSideProps()` or `getSettings()` helper

- [ ] API Endpoint (if missing, auto-generate)
  - Route: `POST /api/settings`
  - Create new handler under `app/api/settings/route.ts`
  - Save to `Settings` table (or key-value config store)
  - Use Prisma schema:

    ```ts
    model Setting {
      id         String   @id @default(cuid())
      key        String   @unique
      value      String
      createdAt  DateTime @default(now())
      updatedAt  DateTime @updatedAt
    }
    ```

  - Example keys:
    - `store_name`, `store_email`, `default_language`, `logo_url`, `free_shipping_threshold`, `maintenance_mode`, etc.

- [ ] Auto-Prompt: if `Setting` table or endpoint `/api/settings` doesn’t exist, prompt Cursor to:
  - Scaffold the table using Prisma
  - Scaffold `route.ts` with `GET`, `POST`, and optional `PUT`

- [ ] Localization Support
  - Wrap all labels with `t('settings.general.store_name')` for i18n
  - Support both `en` and `vi`

- [ ] Validation (Zod Schema)
  ```ts
  const settingsSchema = z.object({
    storeName: z.string().min(2),
    email: z.string().email(),
    phone: z.string().optional(),
    defaultLanguage: z.enum(['en', 'vi']),
    currency: z.string().min(1),
    taxPercent: z.number().min(0).max(100),
    freeShippingThreshold: z.number().min(0),
    enableStripe: z.boolean(),
    enableMomo: z.boolean(),
    enableCOD: z.boolean(),
    maintenanceMode: z.boolean(),
  });

## 🧠 Notes

- Use a `SettingsService` utility to map key-value store to/from JSON config
- Reuse these settings across the app by loading on server + caching
- This approach is extensible and scalable for future additions (e.g. themes, business hours)

---

Would you like me to generate the initial UI code or the Prisma `Setting` model + API handler next?

---

### 11. Notification System for Admin & Users [X]

#### General Goals
- [X] 🔔 Display notifications for both **Admin Dashboard** and **Customer UI**
- [X] Design scalable notification model with support for:
  - Role-based filtering (admin vs. user)
  - Type-specific styling (e.g. order updates, system alerts)
  - Read/unread status

---

## 1. Database Schema (Prisma)

```ts
model Notification {
  id        String   @id @default(cuid())
  title     String
  body      String?
  type      NotificationType
  recipientType RecipientType // enum: ADMIN or USER
  userId    String?           // nullable if sent to all users/admins
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User?    @relation(fields: [userId], references: [id])
}

enum NotificationType {
  ORDER
  STOCK
  PAYMENT
  SYSTEM
  PROMOTION
}

enum RecipientType {
  ADMIN
  USER
}
```

## 2. Backend API (NestJS)

- [X] `GET /notifications` – Fetch notifications for the current user  
  - Use JWT to detect role (admin/user) and filter accordingly.

- [X] `PATCH /notifications/:id/read` – Mark a notification as read.

- [X] `PATCH /notifications/read-all` – Mark all notifications as read for the current user.

- [X] `POST /notifications` – Allow system/manual creation  
  - Include `recipientType` and optional `userId`.  
  - Validate access using guards.

- [X] `GET /notifications/unread-count` – Get unread notification count.

- [X] `DELETE /notifications/:id` – Delete a notification.

> ✅ Use Swagger to document each route at `/api-docs`.

---

## 3. Frontend – Admin Panel (Shadcn + Cursor)

- [X] 🔔 Notification bell in top nav bar.
- [X] 🔴 Red badge displayed when there are unread notifications.
- [X] 🔽 Dropdown includes:
  - Type icon
  - Title + preview of body
  - Time ago
  - “Mark all as read” button

**UX Enhancements:**
- [X] Group by date (e.g., Today / Yesterday).
- [X] Loading and empty states.
- [X] Delete individual notifications.

---

## 4. Frontend – User UI (Customer Site)

- [X] 🔔 Bell icon in the navbar.
- [X] `/notifications` route for full notification history.
- [X] Filter only notifications with `USER` recipientType.

**Types to show:**
- [X] Promotions
- [X] Order status updates
- [X] Payment alerts

---

## 5. Real-time (Optional)

- [X] Polling mechanism (every 30 seconds).
- [X] Update unread count in real time.
- [X] Refresh notifications on page load.

---

## 6. Best Practices

- [X] Use DTOs and validation (`class-validator`).
- [X] Extract logic into a reusable `NotificationService`.
- [X] Maintain consistent typings between backend and frontend.
- [X] Use timezone-aware formatting (`date-fns`).
- [X] Secure all endpoints with role guards and user identity checks.
- [X] Track unread count in layout context for global badge updates.

---

## 7. Testing

- [X] Backend unit tests for controllers and services.
- [X] Frontend component tests (e.g., dropdown, icon).
- [X] End-to-end tests for API endpoints.



---

### 13. CI/CD and Deployment Readiness [ ]

- [ ] Setup `.dockerignore`, `.env.example` files
- [ ] Dockerize backend with production-ready Dockerfile
- [ ] Create `docker-compose.yml` for local development
- [ ] Setup GitHub Actions or CI:
  - Lint, test, build on PRs
- [ ] Deploy backend to Railway, Fly.io, VPS or Render
- [ ] Setup reverse proxy or subdomain for API (e.g. `api.birdnest.shop`)
- [ ] Setup health check route
- [ ] Optional: Use UptimeRobot to monitor API uptime

---

### 14. Observability and Logging [ ]

- [ ] Add global error handler middleware (backend)
- [ ] Add structured logs (`logger.service.ts` or `pino`)
- [ ] Track user events (e.g. order success, payment failure)
- [ ] Optional: Integrate error monitoring (Sentry / Logtail / Datadog)

---

### 15. Documentation and Developer Experience [ ]

- [ ] Generate Swagger docs at `/api-docs`
- [ ] Write `README.md` inside `backend/`:
  - Setup instructions, run, envs, API overview
- [ ] Add comments and typing to all exposed APIs
- [ ] Document common error messages and responses
- [ ] Provide sample curl or Postman collection
- [ ] Optional: Add API versioning (e.g. `/api/v1/`)
